pipeline {
    agent any
    
    triggers {
        githubPush()
    }
    
    options {
        timestamps()
        buildDiscarder(logRotator(numToKeepStr: '10'))
        timeout(time: 1, unit: 'HOURS')
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    try {
                        checkout scm
                        sh '''
                            echo "Current directory: $(pwd)"
                            echo "Directory contents:"
                            ls -la
                        '''
                    } catch (Exception e) {
                        currentBuild.result = 'FAILURE'
                        error "Failed to checkout code: ${e.message}"
                    }
                }
            }
        }

        stage('Setup Python Environment') {
            steps {
                script {
                    try {
                        sh '''
                            echo "Python version:"
                            python3 --version
                            
                            echo "Creating virtual environment..."
                            rm -rf .venv
                            python3 -m venv .venv
                            
                            echo "Activating virtual environment..."
                            source .venv/bin/activate
                        '''
                    } catch (Exception e) {
                        currentBuild.result = 'FAILURE'
                        error "Failed to setup Python environment: ${e.message}"
                    }
                }
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    try {
                        sh '''
                            source .venv/bin/activate
                            
                            # Debug: Show workspace contents
                            echo "Workspace contents:"
                            ls -la
                            
                            # Set PYTHONPATH to the current workspace
                            export PYTHONPATH=$WORKSPACE
                            
                            echo "PYTHONPATH: $PYTHONPATH"
                            echo "Tree directory contents:"
                            ls -la Tree/
                            
                            # Run tests
                            cd Testing/Tree
                            python3 tree-testing.py
                        '''
                    } catch (Exception e) {
                        currentBuild.result = 'FAILURE'
                        error "Tests failed: ${e.message}"
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed! Check the logs for details.'
        }
        always {
            script {
                cleanWs(
                    cleanWhenSuccess: true,
                    cleanWhenFailure: true,
                    cleanWhenAborted: true,
                    deleteDirs: true
                )
                sh '''
                    if [ -d ".venv" ]; then
                        rm -rf .venv
                    fi
                '''
            }
        }
    }
}
