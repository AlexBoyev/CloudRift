pipeline {
    agent any

    triggers {
        githubPush()
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    try {
                        checkout scm
                        sh '''
                            echo "Workspace contents:"
                            ls -la
                        '''
                    } catch (Exception e) {
                        error "Checkout failed: ${e.message}"
                    }
                }
            }
        }

        stage('Setup Python') {
            steps {
                script {
                    try {
                        sh '''
                            echo "Python version:"
                            python3 --version

                            echo "Setting up virtual environment..."
                            python3 -m venv .venv
                            source .venv/bin/activate

                            # Install any requirements if needed
                            if [ -f Tree/requirements.txt ]; then
                                pip install -r Tree/requirements.txt
                            fi
                        '''
                    } catch (Exception e) {
                        error "Setup failed: ${e.message}"
                    }
                }
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    try {
                        sh '''
                            source .venv/bin/activate

                            # Show the directory structure
                            echo "Current directory: $(pwd)"
                            echo "Contents:"
                            ls -la

                            # Add current directory to PYTHONPATH
                            export PYTHONPATH=$PYTHONPATH:$(pwd)

                            # Run the tests
                            cd Testing/Tree
                            python3 tree-testing.py
                        '''
                    } catch (Exception e) {
                        error "Tests failed: ${e.message}"
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}