events {
    worker_connections 1024;
}

http {
    server {
        listen 80;

        # Root location serves a simple welcome message
        location = / {
            return 200 "Hello from Nginx!";
            add_header Content-Type text/plain;
        }

        # Define allowed origins based on specified IPs
        set $allowed_origin "";
        if ($http_origin ~* (https://cloudrifttesting.com|http://85.250.147.173|http://localhost)) {
            set $allowed_origin $http_origin;
        }

        # CORS headers
        add_header Access-Control-Allow-Origin $allowed_origin always;
        add_header Access-Control-Allow-Methods "GET, POST, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Content-Type, Authorization" always;
        add_header Access-Control-Expose-Headers "Content-Type, Authorization" always;

        # Handle OPTIONS requests for CORS preflight
        location / {
            if ($request_method = OPTIONS) {
                add_header Access-Control-Allow-Origin $allowed_origin;
                add_header Access-Control-Allow-Methods "GET, POST, DELETE, OPTIONS";
                add_header Access-Control-Allow-Headers "Content-Type, Authorization";
                add_header Content-Length 0;
                add_header Content-Type text/plain;
                return 204;
            }
        }

        # Proxy settings for Jenkins
        location /jenkins/ {
            proxy_pass http://jenkins:8080;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Prefix /jenkins;

            sub_filter_once off;
            sub_filter 'href="/' 'href="/jenkins/';
            sub_filter 'src="/' 'src="/jenkins/';
            sub_filter 'url("/' 'url("/jenkins/';
            sub_filter 'action="/' 'action="/jenkins/';
        }

        # Route for the BST Tree Service
        location /bst-tree/ {
            proxy_pass http://bst_tree:5001/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Handle trailing slashes correctly
            rewrite ^/bst-tree/(.*) /$1 break;
        }

        # Route for the Backend API
        location /backend/ {
            proxy_pass http://backend_api:5000/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Handle trailing slashes correctly
            rewrite ^/backend/(.*) /$1 break;
        }

        # Catch-all for undefined routes
        location /catch_all {
            return 404 "Custom 404 Error: The requested route does not exist on this server.\n";
            add_header Content-Type text/plain;
        }
    }
}
